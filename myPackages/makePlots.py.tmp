import random
import pandas as pd
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import pandas.core.common as com

from pandas.core.index import Index
from pandas.tools import plotting
from pandas.tools.plotting import scatter_matrix
from sklearn.metrics import roc_curve, auc, roc_auc_score

# Plot signal and background distributions for some
# variables
# The first two arguments select what is "signal"
# and what is "background". This means you can
# use it for more general comparisons of two
# subsets as well.
#signal_background(df[df.y<0.5], df[df.y>0.5],
#                  column=["lepton_pT",
#                          "lepton_eta",
#                          "lepton_phi",
#                          "missing_energy_magnitude",
#                          "jet_3_pt"],
#                  bins=20)

def signal_background(data1, data2, column=None, grid=True,
                      xlabelsize=None, xrot=None, ylabelsize=None,
                      yrot=None, ax=None, sharex=False,
                      sharey=False, figsize=None,
                      layout=None, bins=10, **kwds):
  """Draw histogram of the DataFrame's series comparing the distribution
   in `data1` to `data2`.
   
   data1: DataFrame
   data2: DataFrame
   column: string or sequence
       If passed, will be used to limit data to a subset of columns
   grid : boolean, default True
       Whether to show axis grid lines
   xlabelsize : int, default None
       If specified changes the x-axis label size
   xrot : float, default None
       rotation of x axis labels
   ylabelsize : int, default None
       If specified changes the y-axis label size
   yrot : float, default None
       rotation of y axis labels
   ax : matplotlib axes object, default None
   sharex : bool, if True, the X axis will be shared amongst all subplots.
   sharey : bool, if True, the Y axis will be shared amongst all subplots.
   figsize : tuple
       The size of the figure to create in inches by default
   layout: (optional) a tuple (rows, columns) for the layout of the histograms
   bins: integer, default 10
       Number of histogram bins to be used
   kwds : other plotting keyword arguments
       To be passed to hist function
** means that the input will be of the form 'foo1=bar1, foo2=bar2, etc'
* would mean that the input would be of the form 'bar1, bar2, etc'
in both cases the input is a list, only that the former is a dictionary
  """
  if 'alpha' not in kwds :
    kwds['alpha'] = 0.5

  if column is not None:
    if not isinstance(column, (list, np.ndarray, Index)):
      column = [column]
    data1 = data1[column]
    data2 = data2[column]
        
# select only numeric columns from dataframe
  data1 = data1._get_numeric_data()
  data2 = data2._get_numeric_data()
  naxes = len(data1.columns)

# drawing subplots for each feature
  fig, axes = plotting._subplots(naxes=naxes, ax=ax, squeeze=False,
                                   sharex=sharex,
                                   sharey=sharey,
                                   figsize=figsize,
                                   layout=layout)
  _axes = plotting._flatten(axes)

# do the actual plotting
  for i, col in enumerate(com._try_sort(data1.columns)):
    ax = _axes[i]
    low = min(data1[col].min(), data2[col].min())
    high = max(data1[col].max(), data2[col].max())
    if high > 10000. :
      data1[col] = data1[col]/1000.
      data2[col] = data2[col]/1000.
    low = min(data1[col].min(), data2[col].min())
    high = max(data1[col].max(), data2[col].max())

    ax.hist(data1[col].dropna().values,
                bins=bins, range=(low,high), **kwds)
    ax.hist(data2[col].dropna().values,
                bins=bins, range=(low,high), **kwds)
    ax.set_title(col)
    ax.grid(grid)

  plotting._set_ticks_props(axes, xlabelsize=xlabelsize, xrot=xrot,
                              ylabelsize=ylabelsize, yrot=yrot)
  fig.subplots_adjust(wspace=0.3, hspace=0.7)

  return fig 

""" ****************************************************************************************** """

#df.ix[random.sample(df.index, 1000)].plot(kind='scatter',
#                                          x='lepton_pT', y='jet_3_pt',
#                                          c='y', cmap='autumn')
def scatter_plot(data, branchX, branchY, color='y', nrandom=2, doRandom=False):
  """
  data : dataframe
  nrandom : pick up nrandom points from the columns
  doRandom : bool, if true nrandom has to be provided, else it resorts to default
  branchX : feature name on the x-axis
  branchY : feature name on the y-axis
  color : feature name on the target .. to determine how signal-like/background-like a point is
  """

  if not doRandom :
    nrandom = data.shape[0] 
  
#index is the label on rows, usually 1,2,3, ...  
  randInds = random.sample(data.index, nrandom)

#attribute ix[randInds] grabs the rows satisfied by the random indices
#
  axes = data.ix[randInds].plot(kind='scatter', x=branchX, y=branchY, c=color, cmap='autumn')

  figure = plt.figure()
  axes.set_figure(figure)

  return figure 

""" ****************************************************************************************** """

def box_plot(data, column, by='y') : 
  """
  data : dataframe
  column: string or sequence
          If passed, will be used to limit data to a subset of columns
  
  """
  figure = plt.figure()
  axes = data.boxplot(by=by,
           column=column,
           return_type='axes')

  axes.set_figure(figure)
  return figure 

""" ****************************************************************************************** """

# remove the y column from the correlation matrix
# after using it to select background and signal
##correlations(df[bg].drop('y', 1))
##correlations(df[sig].drop('y', 1))
##
def correlations(data, **kwds):
  """Calculate pairwise correlation between features.
  
  Extra arguments are passed on to DataFrame.corr()
  """
  # simply call df.corr() to get a table of
  # correlation values if you do not need
  # the fancy plotting
  corrmat = data.corr(**kwds)

  fig, ax1 = plt.subplots(ncols=1, figsize=(6,5))
    
  opts = {'cmap': plt.get_cmap("RdBu"),
            'vmin': -1, 'vmax': +1}
  heatmap1 = ax1.pcolor(corrmat, **opts)
  plt.colorbar(heatmap1, ax=ax1)

  ax1.set_title("Correlations")

  labels = corrmat.columns.values
  for ax in (ax1,):
    # shift location of ticks to center of the bins
    ax.set_xticks(np.arange(len(labels))+0.5, minor=False)
    ax.set_yticks(np.arange(len(labels))+0.5, minor=False)
    ax.set_xticklabels(labels, minor=False, ha='right', rotation=70)
    ax.set_yticklabels(labels, minor=False)
        
  plt.tight_layout()
    
  return fig

""" ****************************************************************************************** """

# roc curve is like an efficiency plot [True positive vs. False positive]
def plot_roc_curve(classifier, X_test, y_test,filename) : 
  """
  classifier : e.g DecisionTreeClassifier
  X_test : ndarray of input test data
  y_test : tuple of true y results used for testing

  """
  decisions = classifier.decision_function(X_test)
  # Compute ROC curve and area under the curve
  fpr, tpr, thresholds = roc_curve(y_test, decisions)
  roc_auc = auc(fpr, tpr)
 
  figure = plt.figure()
  axes = figure.add_subplot(111)
 
  axes.plot(fpr, tpr, lw=1, label='ROC (area = %0.2f)'%(roc_auc))
  
  axes.plot([0, 1], [0, 1], '--', color=(0.6, 0.6, 0.6), label='Luck')
  axes.set_xlim([-0.05, 1.05])
  axes.set_ylim([-0.05, 1.05])
  axes.set_xlabel('False Positive Rate')
  axes.set_ylabel('True Positive Rate')
  axes.set_title('Receiver operating characteristic')
  axes.legend(loc="lower right")
  axes.grid()
  figure.savefig(filename, format='eps', dpi=1000)

""" ****************************************************************************************** """


# testing for over-training
#compare_train_test(bdt, X_train, y_train, X_test, y_test)
def compare_train_test(clf, X_train, y_train, X_test, y_test, filename, bins=30):
  decisions = []
  for X,y in ((X_train, y_train), (X_test, y_test)):
    d1 = clf.decision_function(X[y>0.5]).ravel()
    d2 = clf.decision_function(X[y<0.5]).ravel()
    decisions += [d1, d2]
        
  low = min(np.min(d) for d in decisions)
  high = max(np.max(d) for d in decisions)
  low_high = (low,high)

  figure = plt.figure()
  axes = figure.add_subplot(111)
    
  axes.hist(decisions[0],
           color='r', alpha=0.5, range=low_high, bins=bins,
           histtype='stepfilled', normed=True,
           label='S (train)')
  axes.hist(decisions[1],
             color='b', alpha=0.5, range=low_high, bins=bins,
             histtype='stepfilled', normed=True,
             label='B (train)')

  hist, bins = np.histogram(decisions[2],
                            bins=bins, range=low_high, normed=True)
  scale = len(decisions[2]) / sum(hist)
  err = np.sqrt(hist * scale) / scale
  
  width = (bins[1] - bins[0])
  center = (bins[:-1] + bins[1:]) / 2
  axes.errorbar(center, hist, yerr=err, fmt='o', c='r', label='S (test)')
  
  hist, bins = np.histogram(decisions[3],
                            bins=bins, range=low_high, normed=True)
  scale = len(decisions[2]) / sum(hist)
  err = np.sqrt(hist * scale) / scale

  axes.errorbar(center, hist, yerr=err, fmt='o', c='b', label='B (test)')

  axes.set_xlabel("BDT output")
  axes.set_ylabel("Arbitrary units")
  axes.legend(loc='best')
  figure.savefig(filename, format='eps', dpi=1000)  

